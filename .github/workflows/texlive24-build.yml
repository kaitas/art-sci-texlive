name: Build TeX Document and Notify

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  initial-setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      id: login-ghcr
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
      continue-on-error: true

    - name: Notify Slack and Discord about CR_PAT failure
      if: steps.login-ghcr.outcome == 'failure'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        MESSAGE="*GitHub Container Registry認証に失敗しました*\n\nCR_PATが有効期限切れしている可能性があります。こちらで新しいPATを設定してください。 https://github.com/settings/tokens\n\n*リポジトリ:* ${{ github.repository }}"

        if [ -n "$SLACK_WEBHOOK" ]; then
          SLACK_RESPONSE=$(curl -w "\n%{http_code}" -X POST $SLACK_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#FF0000",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "'"$MESSAGE"'"
                    }
                  }
                ]
              }
            ]
          }')

          SLACK_HTTP_STATUS=$(echo "$SLACK_RESPONSE" | tail -n1)
          SLACK_RESPONSE_BODY=$(echo "$SLACK_RESPONSE" | sed '$d')

          if [ "$SLACK_HTTP_STATUS" != "200" ]; then
            echo "Failed to send Slack notification. HTTP status: $SLACK_HTTP_STATUS"
            echo "Response body: $SLACK_RESPONSE_BODY"
          else
            echo "Slack notification sent successfully."
          fi
        else
          echo "SLACK_WEBHOOK is not set. Skipping Slack notification."
        fi

        if [ -n "$DISCORD_WEBHOOK" ]; then
          DISCORD_RESPONSE=$(curl -w "\n%{http_code}" -X POST $DISCORD_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "content": "'"$MESSAGE"'"
          }')

          DISCORD_HTTP_STATUS=$(echo "$DISCORD_RESPONSE" | tail -n1)
          DISCORD_RESPONSE_BODY=$(echo "$DISCORD_RESPONSE" | sed '$d')

          if [ "$DISCORD_HTTP_STATUS" != "204" ]; then
            echo "Failed to send Discord notification. HTTP status: $DISCORD_HTTP_STATUS"
            echo "Response body: $DISCORD_RESPONSE_BODY"
          else
            echo "Discord notification sent successfully."
          fi
        else
          echo "DISCORD_WEBHOOK is not set. Skipping Discord notification."
        fi
      continue-on-error: true

    - name: Exit if login failed
      if: steps.login-ghcr.outcome == 'failure'
      run: exit 1

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/texlive:latest
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/texlive:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/texlive:buildcache,mode=max

  update-and-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      id: login-ghcr
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}
      continue-on-error: true

    - name: Notify Slack and Discord about CR_PAT failure
      if: steps.login-ghcr.outcome == 'failure'
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        MESSAGE="*GitHub Container Registry認証に失敗しました*\n\nCR_PATが有効期限切れしている可能性があります。こちらで新しいPATを設定してください。 https://github.com/settings/tokens\n\n*リポジトリ:* ${{ github.repository }}"

        if [ -n "$SLACK_WEBHOOK" ]; then
          SLACK_RESPONSE=$(curl -w "\n%{http_code}" -X POST $SLACK_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "#FF0000",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "'"$MESSAGE"'"
                    }
                  }
                ]
              }
            ]
          }')

          SLACK_HTTP_STATUS=$(echo "$SLACK_RESPONSE" | tail -n1)
          SLACK_RESPONSE_BODY=$(echo "$SLACK_RESPONSE" | sed '$d')

          if [ "$SLACK_HTTP_STATUS" != "200" ]; then
            echo "Failed to send Slack notification. HTTP status: $SLACK_HTTP_STATUS"
            echo "Response body: $SLACK_RESPONSE_BODY"
          else
            echo "Slack notification sent successfully."
          fi
        else
          echo "SLACK_WEBHOOK is not set. Skipping Slack notification."
        fi

        if [ -n "$DISCORD_WEBHOOK" ]; then
          DISCORD_RESPONSE=$(curl -w "\n%{http_code}" -X POST $DISCORD_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "content": "'"$MESSAGE"'"
          }')

          DISCORD_HTTP_STATUS=$(echo "$DISCORD_RESPONSE" | tail -n1)
          DISCORD_RESPONSE_BODY=$(echo "$DISCORD_RESPONSE" | sed '$d')

          if [ "$DISCORD_HTTP_STATUS" != "204" ]; then
            echo "Failed to send Discord notification. HTTP status: $DISCORD_HTTP_STATUS"
            echo "Response body: $DISCORD_RESPONSE_BODY"
          else
            echo "Discord notification sent successfully."
          fi
        else
          echo "DISCORD_WEBHOOK is not set. Skipping Discord notification."
        fi
      continue-on-error: true

    - name: Exit if login failed
      if: steps.login-ghcr.outcome == 'failure'
      run: exit 1

    - name: Build and load Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: texlive:latest
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/texlive:buildcache

    - name: Build TeX document
      run: |
        docker run --rm -v ${{ github.workspace }}:/workdir texlive:latest \
          ptex2pdf conference_samp.tex -l -ot -kanji=utf8

    - name: Upload PDF artifact
      uses: actions/upload-artifact@v4
      with:
        name: PDF
        path: conference_samp.pdf

    - name: Notify Slack and Discord
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          STATUS="成功"
          COLOR="#36a64f"
        else
          STATUS="失敗"
          COLOR="#ff0000"
        fi

        SLACK_MESSAGE="*TeXドキュメントのビルドが${STATUS}しました*\n\n*リポジトリ:* ${{ github.repository }}\n*ブランチ:* ${{ github.ref_name }}\n*コミット:* ${{ github.sha }}\n*実行者:* ${{ github.actor }}\n*ワークフロー:* <${{ env.WORKFLOW_URL }}|こちらをクリック>"
        DISCORD_MESSAGE="**TeXドキュメントのビルドが${STATUS}しました**\n\n**リポジトリ:** ${{ github.repository }}\n**ブランチ:** ${{ github.ref_name }}\n**コミット:** ${{ github.sha }}\n**実行者:** ${{ github.actor }}\n**ワークフロー:** ${{ env.WORKFLOW_URL }} (こちらをクリック)"

        if [ -n "$SLACK_WEBHOOK" ]; then
          SLACK_RESPONSE=$(curl -w "\n%{http_code}" -X POST $SLACK_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "attachments": [
              {
                "color": "'"$COLOR"'",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "'"$SLACK_MESSAGE"'"
                    }
                  }
                ]
              }
            ]
          }')

          SLACK_HTTP_STATUS=$(echo "$SLACK_RESPONSE" | tail -n1)
          SLACK_RESPONSE_BODY=$(echo "$SLACK_RESPONSE" | sed '$d')

          if [ "$SLACK_HTTP_STATUS" != "200" ]; then
            echo "Failed to send Slack notification. HTTP status: $SLACK_HTTP_STATUS"
            echo "Response body: $SLACK_RESPONSE_BODY"
          else
            echo "Slack notification sent successfully."
          fi
        else
          echo "SLACK_WEBHOOK is not set. Skipping Slack notification."
        fi

        if [ -n "$DISCORD_WEBHOOK" ]; then
          DISCORD_RESPONSE=$(curl -w "\n%{http_code}" -X POST $DISCORD_WEBHOOK \
          -H 'Content-type: application/json' \
          --data '{
            "content": "'"$DISCORD_MESSAGE"'"
          }')

          DISCORD_HTTP_STATUS=$(echo "$DISCORD_RESPONSE" | tail -n1)
          DISCORD_RESPONSE_BODY=$(echo "$DISCORD_RESPONSE" | sed '$d')

          if [ "$DISCORD_HTTP_STATUS" != "204" ]; then
            echo "Failed to send Discord notification. HTTP status: $DISCORD_HTTP_STATUS"
            echo "Response body: $DISCORD_RESPONSE_BODY"
          else
            echo "Discord notification sent successfully."
          fi
        else
          echo "DISCORD_WEBHOOK is not set. Skipping Discord notification."
        fi